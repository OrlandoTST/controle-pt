import streamlit as st
import pandas as pd
from datetime import datetime

# Caminho do arquivo
DATA_FILE = "pts_data.csv"

# Colunas obrigat√≥rias
required_columns = [
    "Numera√ß√£o", "Tipo", "Setor", "Solicitante", "Descri√ß√£o do Servi√ßo",
    "Data Emiss√£o", "Devolvida", "Data Devolu√ß√£o", "Recebedor",
    "TST Resp. Libera√ß√£o em √°rea", "√öltima Atualiza√ß√£o"
]

# Carregar dados
try:
    df = pd.read_csv(DATA_FILE)
    for col in required_columns:
        if col not in df.columns:
            df[col] = ""
except FileNotFoundError:
    df = pd.DataFrame(columns=required_columns)

df = df.reindex(columns=required_columns)

# Notifica√ß√£o de nova PT emitida
if not df.empty:
    ultima_pt = df.iloc[-1]
    ultima_msg = f"üîî √öltima PT emitida: {ultima_pt['Numera√ß√£o']} ({ultima_pt['Data Emiss√£o']})"
    st.info(ultima_msg)

# Atualizar status de devolu√ß√£o
def sinalizar_devolucao(row):
    return "Devolvida" if str(row["Devolvida"]).strip().lower() == "sim" else "N√£o devolvida"

if not df.empty:
    df["Status"] = df.apply(sinalizar_devolucao, axis=1)

# Gerar pr√≥xima numera√ß√£o
def gerar_numeracao():
    if df.empty:
        return "061-2025"
    nums_existentes = df["Numera√ß√£o"].dropna().apply(lambda x: int(x.split("-")[0]))
    novo_num = nums_existentes.max() + 1 if not nums_existentes.empty else 61
    return f"{novo_num:03d}-2025"

# Interface
st.title("Controle de Permiss√£o de Trabalho (PT/PTT)")

# Formul√°rio para nova PT
with st.form("nova_pt"):
    numeracao = gerar_numeracao()
    tipo = st.selectbox("Tipo de Permiss√£o", ["PT", "PTT"])
    setor = st.text_input("Setor")
    solicitante = st.text_input("Solicitante")
    descricao_servico = st.text_area("Descri√ß√£o do Servi√ßo")
    data_emissao = datetime.today().strftime('%Y-%m-%d')
    submit_button = st.form_submit_button("Emitir PT/PTT")

    if submit_button and setor and solicitante:
        nova_linha = {
            "Numera√ß√£o": numeracao,
            "Tipo": tipo,
            "Setor": setor,
            "Solicitante": solicitante,
            "Descri√ß√£o do Servi√ßo": descricao_servico,
            "Data Emiss√£o": data_emissao,
            "Devolvida": "N√£o",
            "Data Devolu√ß√£o": "",
            "Recebedor": "",
            "TST Resp. Libera√ß√£o em √°rea": "",
            "√öltima Atualiza√ß√£o": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
        df = pd.concat([df, pd.DataFrame([nova_linha])], ignore_index=True)
        df.to_csv(DATA_FILE, index=False)
        st.success(f"‚úÖ PT/PTT {numeracao} emitida com sucesso!")
        st.rerun()

# Tabela com lista de PTs
st.subheader("Lista de PTs Emitidas")

if not df.empty:
    st.dataframe(df[[
        "Numera√ß√£o", "Tipo", "Setor", "Solicitante",
        "Descri√ß√£o do Servi√ßo", "Data Emiss√£o", "Status",
        "Data Devolu√ß√£o", "Recebedor", "TST Resp. Libera√ß√£o em √°rea"
    ]])

# Devolu√ß√£o de PT/PTT
st.subheader("Devolver PT/PTT")

pts_pendentes = df[df["Devolvida"].astype(str).str.strip().str.lower() == "n√£o"]["Numera√ß√£o"]

if not pts_pendentes.empty:
    num_devolver = st.selectbox("Selecione a PT/PTT para devolver", pts_pendentes)
    recebedor = st.text_input("Quem recebeu a PT?")
    data_devolucao = st.text_input("Data da Devolu√ß√£o (AAAA-MM-DD)", value=datetime.today().strftime('%Y-%m-%d'))
    tst_resp = st.text_input("TST Resp. Libera√ß√£o em √°rea")

    if st.button("Confirmar Devolu√ß√£o") and recebedor and data_devolucao and tst_resp:
        df.loc[df["Numera√ß√£o"] == num_devolver, [
            "Devolvida", "Data Devolu√ß√£o", "Recebedor", "TST Resp. Libera√ß√£o em √°rea"
        ]] = ["Sim", data_devolucao, recebedor, tst_resp]
        df.to_csv(DATA_FILE, index=False)
        st.success(f"‚úÖ PT/PTT {num_devolver} devolvida com sucesso!")
        st.rerun()
else:
    st.info("Nenhuma PT/PTT pendente para devolu√ß√£o.")

# Exportar
st.subheader("Exportar Hist√≥rico de PTs")
st.download_button(
    "üìÅ Baixar Hist√≥rico",
    df.to_csv(index=False).encode("utf-8"),
    "historico_pts.csv",
    "text/csv"
)


